import logging
from datetime import timedelta, datetime

from core.errors import ObservableValidationError
from core.feed import Feed
from core.observables import Hash, File


class AbuseCHMalwareBazaaar(Feed):

    default_values = {
        "frequency": timedelta(hours=1),
        "name": "AbuseCHMalwareBazaaar",
        "source": "https://bazaar.abuse.ch/export/csv/recent/",
        "description": "This feed contains md5/sha1/sha256",
    }

    def update(self):
        data = {"query": "get_recent", "selector": "time"}
        for _, block in self.update_csv(
            filter_row="first_seen_utc",
            delimiter=",",
            names=[
                "first_seen_utc",
                "sha256_hash",
                "md5_hash",
                "sha1_hash",
                "reporter",
                "file_name",
                "file_type_guess",
                "mime_type",
                "signature",
                "clamav",
                "vtpercent",
                "imphash",
                "ssdeep",
                "tlsh",
            ],
        ):
            self.analyze(block)

    def analyze(self, block):

        if not block.get("sha256_hash"):
            return

        context = {}

        context["first_seen"] = block["first_seen_utc"]
        context["source"] = self.name
        context["filename"] = block["file_name"]
        context["md5"] = block["md5_hash"]
        context["sha1"] = block["sha1_hash"]
        context["sha256"] = block["sha256_hash"]
        context["imphash"] = block["imphash"]
        context["ssdeep"] = block["ssdeep"]
        context["date_added"] = datetime.utcnow()

        malware_file = File.get_or_create(value="FILE:{}".format(block["sha256_hash"]))

        malware_file.add_context(context, dedup_list=["date_added"])
        malware_file.tag(block["mime_type"])
        # md5, sha1, sha256
        for hash_type in ("md5_hash", "sha1_hash", "sha256_hash"):
            try:
                hash_data = Hash.get_or_create(value=block[hash_type])
                hash_data.add_context(context, dedup_list=["date_added"])
                hash_data.add_source(self.name)
                if block.get("tags"):
                    hash_data.tag(block["tags"])

                malware_file.active_link_to(
                    hash_data, hash_type.split("_")[0], self.name
                )
            except ObservableValidationError as e:
                logging.error(e)
